openapi: 3.0.3
info:
  title: Setiket API
  version: 1.0.0
  description: This is Setiket API Documentation Contract
paths:
  /api/admin/user-list/:
    get:
      operationId: admin_user_list_list
      tags:
      - admin
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminListUserSerializers'
          description: ''
  /api/auth/:
    post:
      operationId: auth_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      tags:
      - auth
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/register/:
    post:
      operationId: auth_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSerializers'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSerializers'
          description: ''
  /api/event/:
    get:
      operationId: event_list
      tags:
      - event
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSerializers'
          description: ''
  /api/event/{id}/:
    get:
      operationId: event_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - event
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSerializers'
          description: ''
  /api/event/create/:
    post:
      operationId: event_create_create
      tags:
      - event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventSerializers'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSerializers'
          description: ''
  /api/event/update/{id}/:
    put:
      operationId: event_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventSerializers'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSerializers'
          description: ''
    patch:
      operationId: event_update_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEventSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEventSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEventSerializers'
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSerializers'
          description: ''
  /api/ownevent/:
    get:
      operationId: ownevent_list
      tags:
      - ownevent
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSerializers'
          description: ''
components:
  schemas:
    AdminListUserSerializers:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - email
      - id
      - username
    EventSerializers:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        judul:
          type: string
          readOnly: true
        title:
          type: string
          writeOnly: true
        date:
          type: string
          format: date
          writeOnly: true
        description:
          type: string
        owner:
          type: string
          readOnly: true
        status:
          type: string
          readOnly: true
        request_user:
          type: string
          readOnly: true
        url_detail:
          type: string
          format: uri
          readOnly: true
        ticket_quantity:
          type: integer
          writeOnly: true
        image:
          type: string
          format: uri
          writeOnly: true
        image_url:
          type: string
          readOnly: true
      required:
      - date
      - id
      - image
      - image_url
      - judul
      - owner
      - request_user
      - status
      - ticket_quantity
      - title
      - url_detail
    PatchedEventSerializers:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        judul:
          type: string
          readOnly: true
        title:
          type: string
          writeOnly: true
        date:
          type: string
          format: date
          writeOnly: true
        description:
          type: string
        owner:
          type: string
          readOnly: true
        status:
          type: string
          readOnly: true
        request_user:
          type: string
          readOnly: true
        url_detail:
          type: string
          format: uri
          readOnly: true
        ticket_quantity:
          type: integer
          writeOnly: true
        image:
          type: string
          format: uri
          writeOnly: true
        image_url:
          type: string
          readOnly: true
    RoleEnum:
      enum:
      - customer
      - event_organizer
      - administrator
      type: string
      description: |-
        * `customer` - Customer
        * `event_organizer` - Event Organizer
        * `administrator` - Administrator
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserSerializers:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        email:
          type: string
          format: email
          maxLength: 254
        phone_number:
          type: string
          maxLength: 15
        image:
          type: string
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - email
      - id
      - image
      - password
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
